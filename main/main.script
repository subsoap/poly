local orthographic = require("orthographic.camera")
local poly = require("poly.poly")

local m_x, m_y = 0, 0
function init(self)
	msg.post(".", "acquire_input_focus")

	local box_w = 50; box_h = 50;
	
	self.polygon = poly.Poly(0,0,4)
	self.polygon:AddPoint(poly.PolyPoint(-box_w,-box_h))
	self.polygon:AddPoint(poly.PolyPoint(box_w,-box_h))
	self.polygon:AddPoint(poly.PolyPoint(box_w,box_h))
	self.polygon:AddPoint(poly.PolyPoint(-box_w,box_h))
	self.polygon:SetWidth(50)
	self.polygon:SetAngle(0)
	self.polygon:SetPoints()
	
	--polygon.class = nil
	--polygon.super = nil
	print(self.polygon)

	self.polygon2 = poly.Poly(105,45,4)
	self.polygon2:AddPoint(poly.PolyPoint(-box_w,-box_h))
	self.polygon2:AddPoint(poly.PolyPoint(box_w,-box_h))
	self.polygon2:AddPoint(poly.PolyPoint(box_w,box_h))
	self.polygon2:AddPoint(poly.PolyPoint(-box_w,box_h))
	self.polygon2:SetWidth(50)
	self.polygon2:SetAngle(90)
	self.polygon2:SetPoints()
	
	self.angle = 90
end

function check_collision(self)
	if self.polygon2:collide(self.polygon) == true then 
		label.set_text("/go#label", "true")
		return true 
	elseif self.polygon:collide(self.polygon2) == true then 
		label.set_text("/go#label", "true")
		return true 
	end 
	label.set_text("/go#label", "false")
	return false 
end

function final(self)
	-- Add finalization code here
	-- Remove this function if not needed
end

function update(self, dt)
	--msg.post("@render:", "draw_line", { start_point = vmath.vector3(100, 100, 0), end_point = vmath.vector3(101, 101, 0), color = vmath.vector4(1, 1, 1, 1) } )
	self.angle = self.angle + 0.05
	if self.angle > 360 then self.angle = 0 end 
	self.polygon2:SetAngle(self.angle)
	check_collision(self)
	self.polygon2:UpdatePos(m_x-475, m_y-375)
	self.polygon:render(hash("/camera"))
	self.polygon2:render(hash("/camera"))
	--print(self.point:collide(self.polygon))
	-- print(self.polygon:collide(self.polygon2)) -- attempting this crashes the engine...
	msg.post("@render:", "draw_line", { start_point = vmath.vector3(0, 0, 0), end_point = vmath.vector3(2, 2, 0), color = vmath.vector4(1, 0.1, 0.1, 1) } )
end

function on_message(self, message_id, message, sender)
	-- Add message-handling code here
	-- Remove this function if not needed
end

function on_input(self, action_id, action)
	m_x, m_y = action.x, action.y
end

function on_reload(self)
	-- Add reload-handling code here
	-- Remove this function if not needed
end
